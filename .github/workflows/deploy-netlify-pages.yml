name: Deploy changed backlink(s) to Netlify

on:
  push:
    branches: [main]
    paths:
      - "netlify/**"
  workflow_dispatch:

env:
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # we need history for git diff

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Debug Netlify CLI
        run: |
          echo "Netlify CLI version:"
          netlify --version
          echo "Netlify CLI help for sites:create:"
          netlify sites:create --help || echo "Help command failed"

      - name: Show event SHAs (debug)
        run: |
          echo "event.before: ${{ github.event.before }}"
          echo "event.after : ${{ github.sha }}"
          git log -1 --pretty=fuller

      - name: Compute changed backlink folders under netlify/
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          # 1) Prefer GitHub-provided SHAs on push
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"

          if [ "${{ github.event_name }}" = "push" ] && [ -n "$BEFORE" ] && [ "$BEFORE" != "0000000000000000000000000000000000000000" ]; then
            echo "Using push diff: $BEFORE..$AFTER"
            FILES=$(git diff --name-only "$BEFORE" "$AFTER" | grep '^netlify/' || true)
            echo "Changed files:"
            echo "$FILES"
            
            # If no files changed, deploy all folders (for initial setup or manual trigger)
            if [ -z "$FILES" ]; then
              echo "No files changed in netlify/, deploying all folders..."
              FOLDERS=$(find netlify -maxdepth 1 -type d -name "*" | grep -v "^netlify$" | sed 's|netlify/||' | sort -u)
            else
              # Derive first-level subfolders: netlify/<handle>/
              FOLDERS=$(echo "$FILES" | awk -F/ 'NF>=2 {print $2}' | sort -u)
            fi
          else
            # 2) Fallbacks (workflow_dispatch, first run, squash, etc.)
            echo "Fallback: deploying all folders under netlify/"
            FOLDERS=$(find netlify -maxdepth 1 -type d -name "*" | grep -v "^netlify$" | sed 's|netlify/||' | sort -u)
          fi

          echo "Folders to deploy:"
          echo "$FOLDERS"

          # Save as a newline list & as JSON
          printf "%s\n" $FOLDERS > changed_folders.txt
          jq -R . < changed_folders.txt | jq -s . > folders.json

          COUNT=$(wc -l < changed_folders.txt | tr -d ' ')
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"

      - name: Stop if nothing to deploy
        if: steps.detect.outputs.count == '0'
        run: echo "No changed backlink folders under netlify/. Nothing to deploy."

      - name: Deploy each changed folder
        if: steps.detect.outputs.count != '0'
        env:
          NETLIFY_AUTH_TOKEN: ${{ env.NETLIFY_AUTH_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          # Initialize counters and arrays for summary
          TOTAL_FOLDERS=$(wc -l < changed_folders.txt | tr -d ' ')
          CURRENT_FOLDER=0
          SUCCESSFUL_DEPLOYS=()
          FAILED_DEPLOYS=()

          echo "üöÄ Starting deployment of $TOTAL_FOLDERS folder(s) to Netlify..."
          echo "================================================"

          while read -r FOLDER; do
            [ -z "$FOLDER" ] && continue
            CURRENT_FOLDER=$((CURRENT_FOLDER + 1))
            NETLIFY_DIR="netlify/$FOLDER"
            NETLIFY_SITE_NAME="$(echo "$FOLDER" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9-]+/-/g')"

            echo "::group::[$CURRENT_FOLDER/$TOTAL_FOLDERS] Deploying $NETLIFY_DIR ‚Üí $NETLIFY_SITE_NAME"

            # Normalize filename: Index.html ‚Üí index.html (Netlify expects index.html)
            if [ -f "${NETLIFY_DIR}/Index.html" ] && [ ! -f "${NETLIFY_DIR}/index.html" ]; then
              echo "üìù Normalizing Index.html ‚Üí index.html"
              mv "${NETLIFY_DIR}/Index.html" "${NETLIFY_DIR}/index.html"
            fi

            # Sanity: ensure index.html exists in the subfolder
            if [ ! -f "${NETLIFY_DIR}/index.html" ]; then
              echo "‚ùå ERROR: ${NETLIFY_DIR}/index.html not found. Skipping."
              FAILED_DEPLOYS+=("$FOLDER (missing index.html)")
              echo "::endgroup::"
              continue
            fi

            # Check if site exists, create if not
            if ! netlify sites:list --auth="$NETLIFY_AUTH_TOKEN" | grep -E "^\s*${NETLIFY_SITE_NAME}\b" >/dev/null 2>&1; then
              echo "üÜï Creating new Netlify site: $NETLIFY_SITE_NAME"
              # Create site with proper flags: --auth, --disable-linking, --debug
              if netlify sites:create --name="$NETLIFY_SITE_NAME" --auth="$NETLIFY_AUTH_TOKEN" --disable-linking --debug 2>&1; then
                echo "‚úÖ Created site: $NETLIFY_SITE_NAME"
                # Get the site ID after creation
                SITE_ID=$(netlify sites:list --auth="$NETLIFY_AUTH_TOKEN" --json | jq -r ".[] | select(.name==\"$NETLIFY_SITE_NAME\") | .id")
              else
                echo "‚ùå Failed to create site: $NETLIFY_SITE_NAME"
                echo "Debug: Checking if site was created despite error..."
                # Sometimes the site gets created even if the command reports failure
                SITE_ID=$(netlify sites:list --auth="$NETLIFY_AUTH_TOKEN" --json | jq -r ".[] | select(.name==\"$NETLIFY_SITE_NAME\") | .id")
                if [ -n "$SITE_ID" ] && [ "$SITE_ID" != "null" ]; then
                  echo "‚úÖ Site was actually created: $NETLIFY_SITE_NAME (ID: $SITE_ID)"
                else
                  FAILED_DEPLOYS+=("$FOLDER (site creation failed)")
                  echo "::endgroup::"
                  continue
                fi
              fi
            else
              echo "‚ÑπÔ∏è  Site $NETLIFY_SITE_NAME already exists."
              # Get the site ID for existing site
              SITE_ID=$(netlify sites:list --auth="$NETLIFY_AUTH_TOKEN" --json | jq -r ".[] | select(.name==\"$NETLIFY_SITE_NAME\") | .id")
            fi

            # Verify we have a valid site ID
            if [ -z "$SITE_ID" ] || [ "$SITE_ID" = "null" ]; then
              echo "‚ùå ERROR: Could not find site ID for $NETLIFY_SITE_NAME. Skipping."
              FAILED_DEPLOYS+=("$FOLDER (site ID not found)")
              echo "::endgroup::"
              continue
            fi
            echo "üîë Using site ID: $SITE_ID"

            # Deploy the subfolder to the site
            echo "üöÄ Deploying to Netlify..."
            if netlify deploy --dir="$NETLIFY_DIR" --prod --site="$SITE_ID" --auth="$NETLIFY_AUTH_TOKEN"; then
              echo "‚úÖ Successfully deployed to: https://$NETLIFY_SITE_NAME.netlify.app"
              SUCCESSFUL_DEPLOYS+=("$FOLDER ‚Üí https://$NETLIFY_SITE_NAME.netlify.app")
            else
              echo "‚ùå Deployment failed for $NETLIFY_SITE_NAME"
              FAILED_DEPLOYS+=("$FOLDER (deployment failed)")
            fi
            
            echo "::endgroup::"
          done < changed_folders.txt

          # Print deployment summary
          echo ""
          echo "================================================"
          echo "üìä DEPLOYMENT SUMMARY"
          echo "================================================"
          echo "Total folders processed: $TOTAL_FOLDERS"
          echo "Successful deployments: ${#SUCCESSFUL_DEPLOYS[@]}"
          echo "Failed deployments: ${#FAILED_DEPLOYS[@]}"
          echo ""

          if [ ${#SUCCESSFUL_DEPLOYS[@]} -gt 0 ]; then
            echo "‚úÖ SUCCESSFUL DEPLOYMENTS:"
            for deploy in "${SUCCESSFUL_DEPLOYS[@]}"; do
              echo "  ‚Ä¢ $deploy"
            done
            echo ""
          fi

          if [ ${#FAILED_DEPLOYS[@]} -gt 0 ]; then
            echo "‚ùå FAILED DEPLOYMENTS:"
            for deploy in "${FAILED_DEPLOYS[@]}"; do
              echo "  ‚Ä¢ $deploy"
            done
            echo ""
            exit 1
          fi

          echo "üéâ All deployments completed successfully!"
