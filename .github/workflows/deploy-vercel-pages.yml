name: Deploy subfolders in vercel/ to Vercel (team-scoped)

on:
  push:
    branches: [ main ]
    paths:
      - 'vercel/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # REQUIRED: put these in your repo secrets
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}         # personal token is fine
      VERCEL_TEAM_SLUG: ${{ secrets.VERCEL_TEAM_SLUG }} # e.g. "orvusmarketing"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          npm i -g vercel@latest
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Resolve Vercel Team ID from slug
        id: team
        shell: bash
        run: |
          set -e
          if [ -z "$VERCEL_TEAM_SLUG" ]; then
            echo "Missing VERCEL_TEAM_SLUG secret"; exit 1
          fi
          # Ask Vercel for teams and pick the one matching the slug
          TEAM_JSON=$(vercel teams ls --token "$VERCEL_TOKEN" --json)
          TEAM_ID=$(echo "$TEAM_JSON" | jq -r '.teams[] | select(.slug=="'"$VERCEL_TEAM_SLUG"'") | .id')
          if [ -z "$TEAM_ID" ] || [ "$TEAM_ID" = "null" ]; then
            echo "Could not find team with slug '$VERCEL_TEAM_SLUG'"; echo "$TEAM_JSON"; exit 1
          fi
          echo "team_id=$TEAM_ID" >> "$GITHUB_OUTPUT"

      - name: Discover backlink folders under vercel/
        id: discover
        shell: bash
        run: |
          set -e
          mapfile -t DIRS < <(find vercel -mindepth 1 -maxdepth 1 -type d -print | sort)
          # keep only dirs that contain index.html
          FILTERED=()
          for d in "${DIRS[@]}"; do
            [ -f "$d/index.html" ] && FILTERED+=("$d")
          done
          printf '%s\n' "${FILTERED[@]}" | jq -R . | jq -s . > dirs.json
          echo "dirs_json=$(cat dirs.json)" >> "$GITHUB_OUTPUT"
          echo "Found $(jq 'length' dirs.json) deployable folders."

      - name: Ensure & deploy each folder (team scope)
        if: steps.discover.outputs.dirs_json != '[]'
        shell: bash
        env:
          DIRS_JSON: ${{ steps.discover.outputs.dirs_json }}
          TEAM_ID: ${{ steps.team.outputs.team_id }}
        run: |
          set -e
          baseUrl="https://api.vercel.com"
          teamQS="?teamId=$TEAM_ID"

          echo "$DIRS_JSON" | jq -r '.[]' | while read -r dir; do
            [ -f "$dir/index.html" ] || { echo "Skip $dir (no index.html)"; continue; }

            PROJECT="$(basename "$dir")"
            echo "==> Processing: $dir  (project: $PROJECT)"

            # Ensure project exists in TEAM scope
            if ! curl -fsS "$baseUrl/v9/projects/$PROJECT$teamQS" \
                 -H "Authorization: Bearer $VERCEL_TOKEN" \
                 -o /tmp/proj.json 2>/dev/null; then
              echo "Creating Vercel project: $PROJECT (team: $TEAM_ID)"
              # NOTE: include teamId here to avoid 403
              curl -fsS -X POST "$baseUrl/v9/projects$teamQS" \
                -H "Authorization: Bearer $VERCEL_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$(jq -n --arg name "$PROJECT" '{name: $name, framework: null}')" \
                -o /tmp/proj.json
            else
              echo "Project $PROJECT exists."
            fi

            # Always deploy with team scope; unlink any personal link
            rm -rf "$dir/.vercel"

            echo "==> Linking (team scope)"
            vercel link --cwd "$dir" --yes \
              --token "$VERCEL_TOKEN" \
              --scope "$VERCEL_TEAM_SLUG" || true

            echo "==> Deploying $dir (production, team scope)…"
            vercel deploy --cwd "$dir" --prod --yes \
              --token "$VERCEL_TOKEN" \
              --scope "$VERCEL_TEAM_SLUG"

            echo "✅ Deployed $PROJECT"
          done
