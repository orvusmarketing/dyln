name: Deploy dyln/vercel/* folders to Vercel (changed only)

on:
  push:
    branches: [ main ]   # run on every push to main; we self-filter
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.collect.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # <-- full history so diffs always work

      - id: collect
        shell: bash
        run: |
          set -euo pipefail

          ROOT="dyln/vercel"
          ZERO="0000000000000000000000000000000000000000"
          BEFORE="${{ github.event.before }}"
          HEAD_SHA="${GITHUB_SHA}"

          echo "HEAD_SHA: $HEAD_SHA"
          echo "BEFORE  : ${BEFORE:-<empty>}"

          # Figure out a reliable diff range
          RANGE=""
          if [ -n "${BEFORE:-}" ] && [ "$BEFORE" != "$ZERO" ]; then
            RANGE="${BEFORE}...${HEAD_SHA}"
            echo "Using event range: $RANGE"
          else
            # Fallback 1: previous commit on this branch
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              PREV="$(git rev-parse HEAD~1)"
              RANGE="${PREV}...${HEAD_SHA}"
              echo "Using fallback previous-commit range: $RANGE"
            else
              # Fallback 2: first run — treat everything under ROOT as changed
              echo "No previous commit; listing all files under $ROOT"
              CHANGED="$(git ls-files "$ROOT/")"
            fi
          fi

          if [ -n "${RANGE:-}" ]; then
            # Use diff for the computed range (added/modified/renamed)
            CHANGED="$(git diff --name-only --diff-filter=AMR $RANGE -- "$ROOT/")"
          fi

          echo "Changed paths under $ROOT/:"
          if [ -n "$CHANGED" ]; then
            echo "$CHANGED" | sed 's/^/  - /'
          else
            echo "  (none)"
          fi

          # Collect unique top-level backlink folders: dyln/vercel/<slug>/
          declare -A SEEN=()
          FOLDERS=()
          while IFS= read -r path; do
            [ -z "$path" ] && continue
            # ensure path starts with ROOT
            case "$path" in
              $ROOT/*) ;;
              *) continue ;;
            esac
            folder="$(echo "$path" | cut -d/ -f1-3)"
            # require an index file
            if [ -z "${SEEN[$folder]:-}" ] && { [ -f "$folder/index.html" ] || [ -f "$folder/Index.html" ]; }; then
              SEEN[$folder]=1
              FOLDERS+=("$folder")
            fi
          done <<< "$CHANGED"

          echo "Deployable folders (with index.html or Index.html):"
          if [ ${#FOLDERS[@]} -eq 0 ]; then
            echo "  (none)"
            echo 'matrix={"folder":["__skip__"]}' >> "$GITHUB_OUTPUT"
            exit 0
          else
            printf '  - %s\n' "${FOLDERS[@]}"
          fi

          # Emit matrix
          json="$(printf '%s\n' "${FOLDERS[@]}" | jq -R . | jq -s '{folder: .}')"
          echo "matrix=$json" >> "$GITHUB_OUTPUT"

  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_SLUG: ${{ secrets.VERCEL_TEAM_SLUG }} # optional
    steps:
      - uses: actions/checkout@v4

      - name: Skip when no changed folders
        if: matrix.folder == '__skip__'
        run: echo "No dyln/vercel/* folders with index.html changed — skipping."

      - name: Install Vercel CLI & jq
        if: matrix.folder != '__skip__'
        run: |
          npm i -g vercel@latest
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Deploy ${{ matrix.folder }}
        if: matrix.folder != '__skip__'
        shell: bash
        run: |
          set -euo pipefail
          dir="${{ matrix.folder }}"
          project="$(basename "$dir")"
          echo "Deploying folder: $dir (project: $project)"

          # normalize to lower-case index if needed
          if [ -f "$dir/Index.html" ] && [ ! -f "$dir/index.html" ]; then
            mv "$dir/Index.html" "$dir/index.html"
          fi

          test -f "$dir/index.html" || { echo "Missing $dir/index.html"; exit 1; }

          rm -rf "$dir/.vercel"

          # Force static/no-build behavior
          cat > "$dir/vercel.local.json" <<'JSON'
          { "framework": null, "buildCommand": "", "installCommand": "", "outputDirectory": "." }
          JSON

          if [ -n "${VERCEL_TEAM_SLUG:-}" ]; then
            vercel link --cwd "$dir" --project "$project" --yes \
              --token "$VERCEL_TOKEN" --scope "$VERCEL_TEAM_SLUG"
            vercel deploy --cwd "$dir" --local-config "$dir/vercel.local.json" \
              --prod --yes --token "$VERCEL_TOKEN" --scope "$VERCEL_TEAM_SLUG"
          else
            vercel link --cwd "$dir" --project "$project" --yes --token "$VERCEL_TOKEN"
            vercel deploy --cwd "$dir" --local-config "$dir/vercel.local.json" \
              --prod --yes --token "$VERCEL_TOKEN"
          fi

          echo "✅ Deployed $project"
