name: Deploy dyln/vercel/* folders to Vercel (changed only)

on:
  push:
    branches: [ main ]   # ← no paths filter; we self-filter later
  workflow_dispatch:

concurrency:
  group: vercel-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.collect.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: collect
        shell: bash
        run: |
          set -euo pipefail

          ROOT="dyln/vercel"
          BEFORE="${{ github.event.before }}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "BEFORE    : ${BEFORE}"

          if [ -n "$BEFORE" ] && [ "$BEFORE" != "0000000000000000000000000000000000000000" ]; then
            echo "Using git diff between $BEFORE and $GITHUB_SHA"
            CHANGED="$(git diff --name-only "$BEFORE" "${GITHUB_SHA}" -- "$ROOT/")"
          else
            echo "No 'before' SHA, listing all tracked files under $ROOT/"
            CHANGED="$(git ls-files "$ROOT/")"
          fi

          echo "Changed paths under $ROOT/:"
          echo "$CHANGED" | sed 's/^/  - /'

          declare -A SEEN=()
          FOLDERS=()
          while IFS= read -r path; do
            [ -z "$path" ] && continue
            IFS='/' read -r a b c rest <<< "$path" || true
            [ -z "${a:-}" ] || [ -z "${b:-}" ] || [ -z "${c:-}" ] && continue
            folder="${a}/${b}/${c}"
            if [ -f "$folder/index.html" ] && [ -z "${SEEN[$folder]:-}" ]; then
              SEEN[$folder]=1
              FOLDERS+=("$folder")
            fi
          done <<< "$CHANGED"

          echo "Deployable folders (with index.html):"
          if [ ${#FOLDERS[@]} -eq 0 ]; then
            echo "  (none)"
            echo 'matrix={"folder":["__skip__"]}' >> "$GITHUB_OUTPUT"
            exit 0
          else
            printf '  - %s\n' "${FOLDERS[@]}"
          fi

          json="$(printf '%s\n' "${FOLDERS[@]}" | jq -R . | jq -s '{folder: .}')"
          echo "matrix=$json" >> "$GITHUB_OUTPUT"

  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_SLUG: ${{ secrets.VERCEL_TEAM_SLUG }} # optional
    steps:
      - uses: actions/checkout@v4

      - name: Skip when no changed folders
        if: matrix.folder == '__skip__'
        run: echo "No dyln/vercel/* folders with index.html changed — skipping."

      - name: Check secrets
        if: matrix.folder != '__skip__'
        run: |
          if [ -z "${VERCEL_TOKEN:-}" ]; then
            echo "Missing VERCEL_TOKEN secret" >&2
            exit 1
          fi

      - name: Install Vercel CLI & jq
        if: matrix.folder != '__skip__'
        run: |
          npm i -g vercel@latest
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Deploy ${{ matrix.folder }}
        if: matrix.folder != '__skip__'
        shell: bash
        run: |
          set -euo pipefail
          dir="${{ matrix.folder }}"
          project="$(basename "$dir")"
          echo "Deploying folder: $dir (project: $project)"
          test -d "$dir" && test -f "$dir/index.html" || { echo "Missing $dir/index.html"; exit 1; }

          rm -rf "$dir/.vercel"

          cat > "$dir/vercel.local.json" <<'JSON'
          { "framework": null, "buildCommand": "", "installCommand": "", "outputDirectory": "." }
          JSON

          if [ -n "${VERCEL_TEAM_SLUG:-}" ]; then
            vercel link --cwd "$dir" --project "$project" --yes \
              --token "$VERCEL_TOKEN" --scope "$VERCEL_TEAM_SLUG"
            vercel deploy --cwd "$dir" --local-config "$dir/vercel.local.json" \
              --prod --yes --token "$VERCEL_TOKEN" --scope "$VERCEL_TEAM_SLUG"
          else
            vercel link --cwd "$dir" --project "$project" --yes --token "$VERCEL_TOKEN"
            vercel deploy --cwd "$dir" --local-config "$dir/vercel.local.json" \
              --prod --yes --token "$VERCEL_TOKEN"
          fi

          echo "✅ Deployed $project"
