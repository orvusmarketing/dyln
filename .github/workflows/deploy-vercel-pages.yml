name: Deploy dyln/vercel/* folders to Vercel (changed only)

on:
  push:
    branches: [ main ]   # run on every push to main
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.collect.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Collect changed backlink folders
        id: collect
        shell: bash
        run: |
          set -euo pipefail

          ROOT="dyln/vercel"
          EVENT="$GITHUB_EVENT_PATH"

          # Get paths from push payload (added/modified/renamed)
          mapfile -t CHANGED < <(
            jq -r '
              [
                (.commits[].added[]?),
                (.commits[].modified[]?),
                (.commits[].renamed[]?.to?),
                (.commits[].renamed[]?.from?)
              ] | unique[]' "$EVENT" 2>/dev/null \
            | grep -E "^(${ROOT}|vercel)/" || true
          )

          # Fallback (manual run, squash, etc.)
          if ((${#CHANGED[@]} == 0)); then
            mapfile -t CHANGED < <(git ls-files "${ROOT}/" "vercel/" || true)
          fi

          declare -A SEEN=()
          FOLDERS=()
          for p in "${CHANGED[@]}"; do
            [ -z "$p" ] && continue
            # support both dyln/vercel/<slug>/… and vercel/<slug>/…
            prefix="$(echo "$p" | cut -d/ -f1-2)"
            case "$prefix" in
              dyln/vercel|vercel) folder="$(echo "$p" | cut -d/ -f1-3)";;
              *) continue;;
            esac
            [ -z "$folder" ] && continue
            # require index.html (accept Index.html)
            if [ -z "${SEEN[$folder]:-}" ] && { [ -f "$folder/index.html" ] || [ -f "$folder/Index.html" ]; }; then
              SEEN[$folder]=1
              FOLDERS+=("$folder")
            fi
          done

          if ((${#FOLDERS[@]})); then
            printf 'Deployable folders:\n'; printf '  - %s\n' "${FOLDERS[@]}"
            json="$(printf '%s\n' "${FOLDERS[@]}" | jq -R . | jq -s '{folder: .}')"
            echo "matrix=$json" >> "$GITHUB_OUTPUT"
          else
            echo "No dyln/vercel/* (or vercel/*) folders with index.html changed."
            echo 'matrix={"folder":["__skip__"]}' >> "$GITHUB_OUTPUT"
          fi

  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_TEAM_SLUG: ${{ secrets.VERCEL_TEAM_SLUG }}   # optional
    steps:
      - uses: actions/checkout@v4

      - name: Skip when no changed folders
        if: matrix.folder == '__skip__'
        run: echo "No dyln/vercel/* folders with index.html changed — skipping."

      - name: Install Vercel CLI & jq
        if: matrix.folder != '__skip__'
        run: |
          npm i -g vercel@latest
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Deploy ${{ matrix.folder }}
        if: matrix.folder != '__skip__'
        shell: bash
        run: |
          set -euo pipefail
          dir="${{ matrix.folder }}"
          project="$(basename "$dir")"
          echo "Deploying: $dir (project: $project)"

          # normalize case
          [ -f "$dir/Index.html" ] && [ ! -f "$dir/index.html" ] && mv "$dir/Index.html" "$dir/index.html"
          test -f "$dir/index.html" || { echo "Missing $dir/index.html"; exit 1; }

          rm -rf "$dir/.vercel"

          # Force static/no-build
          cat > "$dir/vercel.local.json" <<'JSON'
          { "framework": null, "buildCommand": "", "installCommand": "", "outputDirectory": "." }
          JSON

          if [ -n "${VERCEL_TEAM_SLUG:-}" ]; then
            vercel link --cwd "$dir" --project "$project" --yes \
              --token "$VERCEL_TOKEN" --scope "$VERCEL_TEAM_SLUG"
            vercel deploy --cwd "$dir" --local-config "$dir/vercel.local.json" \
              --prod --yes --token "$VERCEL_TOKEN" --scope "$VERCEL_TEAM_SLUG"
          else
            vercel link --cwd "$dir" --project "$project" --yes --token "$VERCEL_TOKEN"
            vercel deploy --cwd "$dir" --local-config "$dir/vercel.local.json" \
              --prod --yes --token "$VERCEL_TOKEN"
          fi

          echo "✅ Deployed $project"
