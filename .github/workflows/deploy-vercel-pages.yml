name: Deploy vercel/backlink folders (changed only)

on:
  push:
    branches: [ main ]
    paths:
      - 'vercel/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      # Optional: set if deploying under a Team/Org (slug, e.g. "orvusmarketing")
      VERCEL_TEAM_SLUG: ${{ secrets.VERCEL_TEAM_SLUG }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Vercel CLI & jq
        run: |
          npm i -g vercel@latest
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Discover changed backlink folders
        id: discover
        shell: bash
        run: |
          set -euo pipefail

          # Determine changed files (fallback to all under vercel/ on first push)
          BEFORE="${{ github.event.before }}"
          if [ -n "${BEFORE}" ] && [ "${BEFORE}" != "0000000000000000000000000000000000000000" ]; then
            CHANGED="$(git diff --name-only "${BEFORE}" "${GITHUB_SHA}" -- 'vercel/**' || true)"
          else
            CHANGED="$(git ls-files 'vercel/**' || true)"
          fi

          # Unique first-level subfolders (vercel/<folder>)
          FOLDERS="$(
            echo "${CHANGED}" \
            | awk -F/ 'NF>=2 {print $1"/"$2}' \
            | sort -u
          )"

          # Keep only folders that contain an index.html
          FILTERED=()
          for d in ${FOLDERS}; do
            if [ -f "${d}/index.html" ]; then
              echo "Will deploy: ${d}"
              FILTERED+=("${d}")
            fi
          done

          if [ ${#FILTERED[@]} -eq 0 ]; then
            echo "dirs_json=[]" >> "$GITHUB_OUTPUT"
            echo "No changed backlink folders with index.html. Exiting."
            exit 0
          fi

          # Output JSON array to GITHUB_OUTPUT
          printf '%s\n' "${FILTERED[@]}" | jq -R . | jq -s . | sed -e 's/^/dirs_json=/' >> "$GITHUB_OUTPUT"

      - name: Deploy each changed folder
        if: steps.discover.outputs.dirs_json != '[]'
        shell: bash
        env:
          DIRS_JSON: ${{ steps.discover.outputs.dirs_json }}
        run: |
          set -euo pipefail

          echo "${DIRS_JSON}" | jq -r '.[]' | while read -r dir; do
            PROJECT="$(basename "${dir}")"
            echo "==> Deploying: ${dir}  (project: ${PROJECT})"

            # Per-folder minimal config so Vercel won’t read a root vercel.json
            cat > "${dir}/vercel.local.json" <<'JSON'
{
  "framework": null,
  "buildCommand": "",
  "installCommand": "",
  "outputDirectory": "."
}
JSON

            # Ensure no stale link
            rm -rf "${dir}/.vercel"

            # Link project name to this folder
            if [ -n "${VERCEL_TEAM_SLUG:-}" ]; then
              vercel link --cwd "${dir}" --project "${PROJECT}" --yes \
                --token "${VERCEL_TOKEN}" --scope "${VERCEL_TEAM_SLUG}"
            else
              vercel link --cwd "${dir}" --project "${PROJECT}" --yes \
                --token "${VERCEL_TOKEN}"
            fi

            # Deploy this folder only
            if [ -n "${VERCEL_TEAM_SLUG:-}" ]; then
              vercel deploy --cwd "${dir}" --local-config "${dir}/vercel.local.json" \
                --prod --yes --token "${VERCEL_TOKEN}" --scope "${VERCEL_TEAM_SLUG}"
            else
              vercel deploy --cwd "${dir}" --local-config "${dir}/vercel.local.json" \
                --prod --yes --token "${VERCEL_TOKEN}"
            fi

            echo "✅ Deployed ${PROJECT}"
          done
