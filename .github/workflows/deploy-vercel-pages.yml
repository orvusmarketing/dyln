name: Deploy vercel/backlink folders (changed only)

on:
  push:
    branches: [ main ]
    paths:
      - 'vercel/**'
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.collect.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: collect
        shell: bash
        run: |
          set -euo pipefail

          BEFORE="${{ github.event.before }}"
          if [ -n "${BEFORE}" ] && [ "${BEFORE}" != "0000000000000000000000000000000000000000" ]; then
            CHANGED="$(git diff --name-only "${BEFORE}" "${GITHUB_SHA}" -- 'vercel/**' || true)"
          else
            CHANGED="$(git ls-files 'vercel/**' || true)"
          fi

          # unique first-level subfolders: vercel/<folder>
          declare -A SEEN=()
          FOLDERS=()
          while IFS= read -r path; do
            [ -z "$path" ] && continue
            folder="$(echo "$path" | awk -F/ 'NF>=2 {print $1"/"$2}')"
            [ -z "$folder" ] && continue
            if [ -f "$folder/index.html" ] && [ -z "${SEEN[$folder]:-}" ]; then
              SEEN[$folder]=1
              FOLDERS+=("$folder")
            fi
          done <<< "$CHANGED"

          if [ ${#FOLDERS[@]} -eq 0 ]; then
            echo 'matrix={"folder":[]}' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          json="$(printf '%s\n' "${FOLDERS[@]}" | jq -R . | jq -s '{folder: .}')"
          echo "matrix=$json" >> "$GITHUB_OUTPUT"

  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      # Optional: set if you deploy under a Team/Org (slug, e.g. "orvusmarketing")
      VERCEL_TEAM_SLUG: ${{ secrets.VERCEL_TEAM_SLUG }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Vercel CLI & jq
        run: |
          npm i -g vercel@latest
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Deploy ${{ matrix.folder }}
        shell: bash
        run: |
          set -euo pipefail
          dir="${{ matrix.folder }}"
          project="$(basename "$dir")"
          echo "Deploying folder: $dir as project: $project"

          # Make sure no stale link exists
          rm -rf "$dir/.vercel"

          # Force a static/no-build deploy via a local config file
          printf '%s\n' '{' '  "framework": null,' '  "buildCommand": "",' '  "installCommand": "",' '  "outputDirectory": "."' '}' > "$dir/vercel.local.json"

          if [ -n "${VERCEL_TEAM_SLUG:-}" ]; then
            vercel link --cwd "$dir" --project "$project" --yes \
              --token "$VERCEL_TOKEN" --scope "$VERCEL_TEAM_SLUG"
            vercel deploy --cwd "$dir" --local-config "$dir/vercel.local.json" \
              --prod --yes --token "$VERCEL_TOKEN" --scope "$VERCEL_TEAM_SLUG"
          else
            vercel link --cwd "$dir" --project "$project" --yes \
              --token "$VERCEL_TOKEN"
            vercel deploy --cwd "$dir" --local-config "$dir/vercel.local.json" \
              --prod --yes --token "$VERCEL_TOKEN"
          fi

          echo "âœ… Deployed $project"
